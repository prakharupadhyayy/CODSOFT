import tkinter as tk
from tkinter import messagebox
import json
import os

CONTACTS_FILE = "contacts.json"

def load_contacts():
    if os.path.exists(CONTACTS_FILE):
        with open(CONTACTS_FILE, "r") as file:
            return json.load(file)
    return []

def save_contacts(contacts):
    with open(CONTACTS_FILE, "w") as file:
        json.dump(contacts, file, indent=4)

class ContactBookApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Contact Book")
        self.root.geometry("650x600")
        self.root.configure(bg="#f0f4f8")

        self.contacts = load_contacts()

        # Title
        tk.Label(root, text="Contact Book", font=("Helvetica", 18, "bold"), bg="#f0f4f8").pack(pady=10)

        # Entry fields
        form_frame = tk.Frame(root, bg="#f0f4f8")
        form_frame.pack(pady=5)

        self.name_var = tk.StringVar()
        self.phone_var = tk.StringVar()
        self.email_var = tk.StringVar()
        self.address_var = tk.StringVar()

        self.create_label_entry(form_frame, "Name:", self.name_var, 0)
        self.create_label_entry(form_frame, "Phone:", self.phone_var, 1)
        self.create_label_entry(form_frame, "Email:", self.email_var, 2)
        self.create_label_entry(form_frame, "Address:", self.address_var, 3)

        # Buttons
        btn_frame = tk.Frame(root, bg="#f0f4f8")
        btn_frame.pack(pady=10)

        tk.Button(btn_frame, text="Add Contact", command=self.add_contact, bg="#4CAF50", fg="white", width=15).grid(row=0, column=0, padx=5)
        tk.Button(btn_frame, text="Update Contact", command=self.update_contact, bg="#2196F3", fg="white", width=15).grid(row=0, column=1, padx=5)
        tk.Button(btn_frame, text="Delete Contact", command=self.delete_contact, bg="#f44336", fg="white", width=15).grid(row=0, column=2, padx=5)

        # Search
        search_frame = tk.Frame(root, bg="#f0f4f8")
        search_frame.pack(pady=5)
        self.search_var = tk.StringVar()
        tk.Entry(search_frame, textvariable=self.search_var, width=30).pack(side="left", padx=5)
        tk.Button(search_frame, text="Search", command=self.search_contact).pack(side="left")

        # Contact list
        self.listbox = tk.Listbox(root, width=80, height=10)
        self.listbox.pack(pady=10)
        self.listbox.bind("<<ListboxSelect>>", self.load_selected_contact)

        # Full contact details display
        self.details_label = tk.Label(root, text="Select a contact to view details", font=("Arial", 11), bg="#f0f4f8", justify="left", anchor="w")
        self.details_label.pack(pady=10, fill="both", padx=20)

        self.display_contacts()

    def create_label_entry(self, parent, text, var, row):
        tk.Label(parent, text=text, bg="#f0f4f8", font=("Arial", 11)).grid(row=row, column=0, sticky="e", padx=5, pady=2)
        tk.Entry(parent, textvariable=var, width=40).grid(row=row, column=1, pady=2)

    def add_contact(self):
        contact = self.get_contact_details()
        if contact:
            self.contacts.append(contact)
            save_contacts(self.contacts)
            self.display_contacts()
            self.clear_fields()

    def update_contact(self):
        selected = self.listbox.curselection()
        if selected:
            index = selected[0]
            updated = self.get_contact_details()
            if updated:
                self.contacts[index] = updated
                save_contacts(self.contacts)
                self.display_contacts()
                self.clear_fields()

    def delete_contact(self):
        selected = self.listbox.curselection()
        if selected:
            index = selected[0]
            del self.contacts[index]
            save_contacts(self.contacts)
            self.display_contacts()
            self.clear_fields()
            self.details_label.config(text="Select a contact to view details")

    def search_contact(self):
        query = self.search_var.get().lower()
        results = [c for c in self.contacts if query in c["name"].lower() or query in c["phone"]]
        self.display_contacts(results)

    def load_selected_contact(self, event):
        selected = self.listbox.curselection()
        if selected:
            index = selected[0]
            contact = self.contacts[index]
            self.name_var.set(contact["name"])
            self.phone_var.set(contact["phone"])
            self.email_var.set(contact["email"])
            self.address_var.set(contact["address"])

            # Show full details
            details = (
                f"Name: {contact['name']}\n"
                f"Phone: {contact['phone']}\n"
                f"Email: {contact['email']}\n"
                f"Address: {contact['address']}"
            )
            self.details_label.config(text=details)

    def get_contact_details(self):
        name = self.name_var.get().strip()
        phone = self.phone_var.get().strip()
        email = self.email_var.get().strip()
        address = self.address_var.get().strip()
        if not name or not phone:
            messagebox.showwarning("Missing Info", "Name and phone are required.")
            return None
        return {"name": name, "phone": phone, "email": email, "address": address}

    def display_contacts(self, contact_list=None):
        self.listbox.delete(0, tk.END)
        for contact in contact_list or self.contacts:
            self.listbox.insert(tk.END, f"{contact['name']} : {contact['phone']}")

    def clear_fields(self):
        self.name_var.set("")
        self.phone_var.set("")
        self.email_var.set("")
        self.address_var.set("")

# Run the app
if __name__ == "__main__":
    root = tk.Tk()
    app = ContactBookApp(root)
    root.mainloop()
